transformation_cost_definitions)
results_all<-rbind(results_system, results_tx)
SSP_GLOBAL_list_of_cbvars<-unique(results_all$variable)
#Post process results for interactions
results_all_pp<-cb_post_process_results(results_all, strategy2tx, postprocess_interactions)
results_system<-cb_calculate_system_costs(data,
strategy_cost_instructions[strategy_cost_instructions$strategy_code=='PFLO:ALL_PLUR',],
cost_factor_names)
results_system<-cb_calculate_system_costs(data,
strategy_cost_instructions[strategy_cost_instructions$strategy_code=='PFLO:ALL_PLUR',],
cost_factor_names[cost_factor_names$system_cost_filename=='wali_sanitation_cost_factors.csv'])
results_system<-cb_calculate_system_costs(data,
strategy_cost_instructions[strategy_cost_instructions$strategy_code=='PFLO:ALL_PLUR',],
cost_factor_names[cost_factor_names$system_cost_filename=='wali_sanitation_cost_factors.csv',])
debugSource("~/Desktop/LAC_Decarb_Git/ssp_cost_benefits/Main/cb_utilities.R", echo=TRUE)
results_system<-cb_calculate_system_costs(data,
strategy_cost_instructions[strategy_cost_instructions$strategy_code=='PFLO:ALL_PLUR',],
cost_factor_names[cost_factor_names$system_cost_filename=='wali_sanitation_cost_factors.csv',])
results_system<-cb_calculate_system_costs(data,
strategy_cost_instructions[strategy_cost_instructions$strategy_code=='PFLO:ALL_PLUR',],
cost_factor_names[cost_factor_names$system_cost_filename=='wali_sanitation_cost_factors.csv',])
results_system<-cb_calculate_system_costs(data,
strategy_cost_instructions[strategy_cost_instructions$strategy_code=='PFLO:ALL_PLUR',],
cost_factor_names[cost_factor_names$system_cost_filename=='wali_sanitation_cost_factors.csv',])
source("~/Desktop/LAC_Decarb_Git/ssp_cost_benefits/Main/cb_utilities.R", echo=TRUE)
results_system<-cb_calculate_system_costs(data,
strategy_cost_instructions[strategy_cost_instructions$strategy_code=='PFLO:ALL_PLUR',],
cost_factor_names[cost_factor_names$system_cost_filename=='wali_sanitation_cost_factors.csv',])
results_system<-cb_calculate_system_costs(data,
strategy_cost_instructions[strategy_cost_instructions$strategy_code=='PFLO:ALL_PLUR',],
cost_factor_names[cost_factor_names$system_cost_filename=='wali_sanitation_cost_factors.csv',])
View(sanitation_classification)
sanitation_classification$variable
data_wide
id.vars
SSP_GLOBAL_SIMULATION_IDENTIFIERS
results_system<-cb_calculate_system_costs(data,
strategy_cost_instructions[strategy_cost_instructions$strategy_code=='PFLO:ALL_PLUR',],
cost_factor_names[cost_factor_names$system_cost_filename=='wali_sanitation_cost_factors.csv',])
View(data_wide)
class(data_wide)
source("~/Desktop/LAC_Decarb_Git/ssp_cost_benefits/Main/cb_config.R", echo=TRUE)
results_system<-cb_calculate_system_costs(data,
strategy_cost_instructions[strategy_cost_instructions$strategy_code=='PFLO:ALL_PLUR',],
cost_factor_names[cost_factor_names$system_cost_filename=='wali_sanitation_cost_factors.csv',])
source("~/Desktop/LAC_Decarb_Git/ssp_cost_benefits/Main/cb_config.R", echo=TRUE)
package.install(reshape2)
install.packages("reshape2")
library('reshape2')
results_system<-cb_calculate_system_costs(data,
strategy_cost_instructions[strategy_cost_instructions$strategy_code=='PFLO:ALL_PLUR',],
cost_factor_names[cost_factor_names$system_cost_filename=='wali_sanitation_cost_factors.csv',])
results_system<-cb_calculate_system_costs(data,
strategy_cost_instructions[strategy_cost_instructions$strategy_code=='PFLO:ALL_PLUR',],
cost_factor_names[cost_factor_names$system_cost_filename=='wali_sanitation_cost_factors.csv',])
debugSource("~/Desktop/LAC_Decarb_Git/ssp_cost_benefits/Main/cb_utilities.R", echo=TRUE)
results_system<-cb_calculate_system_costs(data,
strategy_cost_instructions[strategy_cost_instructions$strategy_code=='PFLO:ALL_PLUR',],
cost_factor_names[cost_factor_names$system_cost_filename=='wali_sanitation_cost_factors.csv',])
SSP_LOG_OF_SEARCHED_VARS
a<-c('test')
b<-append(SSP_LOG_OF_SEARCHED_VARS, a)
source("~/Desktop/LAC_Decarb_Git/ssp_cost_benefits/Main/cb_utilities.R", echo=TRUE)
SSP_LOG_VARIABLE_SEARCH<-TRUE
SSP_LOG_OF_SEARCHED_VARS<-list()
results_system<-cb_calculate_system_costs(data,
strategy_cost_instructions[strategy_cost_instructions$strategy_code=='PFLO:ALL_PLUR',],
cost_factor_names[cost_factor_names$system_cost_filename=='wali_sanitation_cost_factors.csv',])
debugSource("~/Desktop/LAC_Decarb_Git/ssp_cost_benefits/Main/cb_utilities.R", echo=TRUE)
results_system<-cb_calculate_system_costs(data,
strategy_cost_instructions[strategy_cost_instructions$strategy_code=='PFLO:ALL_PLUR',],
cost_factor_names[cost_factor_names$system_cost_filename=='wali_sanitation_cost_factors.csv',])
SSP_LOG_OF_SEARCHED_VARS
SSP_LOG_VARIABLE_SEARCH
SSP_LOG_OF_SEARCHED_VARS<-append(SSP_LOG_OF_SEARCHED_VARS, list(variables))
source("~/Desktop/LAC_Decarb_Git/ssp_cost_benefits/Main/cb_strategy_specific_functions.R", echo=TRUE)
results_system<-cb_calculate_system_costs(data,
strategy_cost_instructions[strategy_cost_instructions$strategy_code=='PFLO:ALL_PLUR',],
cost_factor_names[cost_factor_names$system_cost_filename=='wali_sanitation_cost_factors.csv',])
results_system<-cb_calculate_system_costs(data,
strategy_cost_instructions[strategy_cost_instructions$strategy_code=='PFLO:ALL_PLUR',],
cost_factor_names[cost_factor_names$system_cost_filename=='wali_sanitation_cost_factors.csv',])
source("~/Desktop/LAC_Decarb_Git/ssp_cost_benefits/Main/cb_utilities.R", echo=TRUE)
results_system<-cb_calculate_system_costs(data,
strategy_cost_instructions[strategy_cost_instructions$strategy_code=='PFLO:ALL_PLUR',],
cost_factor_names[cost_factor_names$system_cost_filename=='wali_sanitation_cost_factors.csv',])
SSP_LOG_VARIABLE_SEARCH
SSP_LOG_OF_SEARCHED_VARS
unlist(SSP_LOG_OF_SEARCHED_VARS)
source("~/Desktop/LAC_Decarb_Git/ssp_cost_benefits/Main/cb_utilities.R", echo=TRUE)
SSP_GLOBAL_LOG_VARIABLE_SEARCH<-TRUE
SSP_GLOBAL_LOG_OF_SEARCHED_VARS<-list()
debugSource("~/Desktop/LAC_Decarb_Git/ssp_cost_benefits/Main/cb_utilities.R", echo=TRUE)
results_system<-cb_calculate_system_costs(data,
strategy_cost_instructions[strategy_cost_instructions$strategy_code=='PFLO:ALL_PLUR',],
cost_factor_names[cost_factor_names$system_cost_filename=='wali_sanitation_cost_factors.csv',])
SSP_GLOBAL_LOG_OF_SEARCHED_VARS
unlist(SSP_GLOBAL_LOG_OF_SEARCHED_VARS)
unlist(SSP_GLOBAL_LOG_OF_SEARCHED_VARS)
unlist(SSP_GLOBAL_LOG_OF_SEARCHED_VARS)
debugSource("~/Desktop/LAC_Decarb_Git/ssp_cost_benefits/Main/cb_utilities.R", echo=TRUE)
results_system<-cb_calculate_system_costs(data,
strategy_cost_instructions[strategy_cost_instructions$strategy_code=='PFLO:ALL_PLUR',],
cost_factor_names[cost_factor_names$system_cost_filename=='wali_sanitation_cost_factors.csv',])
SSP_GLOBAL_LOG_OF_SEARCHED_VARS
results_system<-cb_calculate_system_costs(data,
strategy_cost_instructions[strategy_cost_instructions$strategy_code=='PFLO:ALL_PLUR',],
cost_factor_names)#[cost_factor_names$system_cost_filename=='wali_sanitation_cost_factors.csv',])
unlist(SSP_GLOBAL_LOG_OF_SEARCHED_VARS)
results_tx<-cb_calculate_transformation_costs(data,
strategy_cost_instructions[strategy_cost_instructions$strategy_code=='PFLO:ALL_PLUR',],
strategy2tx,
transformation_cost_definitions)
results_system<-cb_calculate_system_costs(data,
strategy_cost_instructions[strategy_cost_instructions$strategy_code=='PFLO:ALL_PLUR',],
cost_factor_names)#[cost_factor_names$system_cost_filename=='wali_sanitation_cost_factors.csv',])
results_tx<-cb_calculate_transformation_costs(data,
strategy_cost_instructions[strategy_cost_instructions$strategy_code=='PFLO:ALL_PLUR',],
strategy2tx,
transformation_cost_definitions)
SSP_GLOBAL_LOG_VARIABLE_SEARCH<-TRUE
SSP_GLOBAL_LOG_OF_SEARCHED_VARS<-list()
results_system<-cb_calculate_system_costs(data,
strategy_cost_instructions[strategy_cost_instructions$strategy_code=='PFLO:ALL_PLUR',],
cost_factor_names)#[cost_factor_names$system_cost_filename=='wali_sanitation_cost_factors.csv',])
results_tx<-cb_calculate_transformation_costs(data,
strategy_cost_instructions[strategy_cost_instructions$strategy_code=='PFLO:ALL_PLUR',],
strategy2tx,
transformation_cost_definitions)
global_search_terms<-paste0(unlist(SSP_GLOBAL_LOG_OF_SEARCHED_VARS), collapse=':')
global_search_terms<-paste0(unlist(SSP_GLOBAL_LOG_OF_SEARCHED_VARS), collapse=':')
matched_search_terms<-SSP_GLOBAL_list_of_variables[grep(global_search_terms, SSP_GLOBAL_list_of_variables)]
global_search_terms<-paste0(unlist(SSP_GLOBAL_LOG_OF_SEARCHED_VARS), collapse='|')
matched_search_terms<-SSP_GLOBAL_list_of_variables[grep(global_search_terms, SSP_GLOBAL_list_of_variables)]
#----------------Get Columns Used in Cost Analysis-------------------
list_of_cost_factors<-read.csv('../system_cost_factors_list.csv')
a<-ssp_report_cost_factors(list_of_cost_factors)
x<-read.csv('../transformation_cost_definitions.csv')
a<-append(a, x$difference_variable)
b<-unlist(a)
c<-paste0(b, collapse='|')
d<-grep(c, SSP_GLOBAL_list_of_variables)
e<-SSP_GLOBAL_list_of_variables[d]
e
global_search_terms<-paste0(unlist(SSP_GLOBAL_LOG_OF_SEARCHED_VARS), collapse='|')
matched_search_terms<-SSP_GLOBAL_list_of_variables[grep(global_search_terms, SSP_GLOBAL_list_of_variables)]
matched_search_terms
#get the cost factor variables
list_of_cost_factors<-read.csv('../system_cost_factors_list.csv')
a<-ssp_report_cost_factors(list_of_cost_factors)
#append the variables in the cost definitions
x<-read.csv('../transformation_cost_definitions.csv')
a<-append(a, x$difference_variable)
#ppaned the variables explicitly searched for
a<-append(a, SSP_GLOBAL_LOG_OF_SEARCHED_VARS)
b<-unlist(a)
c<-paste0(b, collapse='|')
d<-grep(c, SSP_GLOBAL_list_of_variables)
e<-SSP_GLOBAL_list_of_variables[d]
#mke it unique
f<-unique(e)
#get the cost factor variables
list_of_cost_factors<-read.csv('../system_cost_factors_list.csv')
a<-ssp_report_cost_factors(list_of_cost_factors)
#append the variables in the cost definitions
x<-read.csv('../transformation_cost_definitions.csv')
a<-append(a, x$difference_variable)
#ppaned the variables explicitly searched for
a<-append(a, SSP_GLOBAL_LOG_OF_SEARCHED_VARS)
#get the matching terms
b<-unlist(a)
c<-paste0(b, collapse='|')
d<-grep(c, SSP_GLOBAL_list_of_variables)
e<-SSP_GLOBAL_list_of_variables[d]
#mke it unique
f<-unique(e)
write.csv('LOG_variables_searched.csv', f)
write.csv(f, 'LOG_variables_searched.csv')
data = subset(data, select=f)
#maps strategies to transformations, from James
strategy2tx<-read.csv('../attribute_strategy_code.csv', check.names = FALSE)
#tells us which strategies to evaluate costs and benefit sfor
strategy_cost_instructions<-read.csv('../strategy_cost_instructions.csv')
#the list of all the cost factor files in the system, and the functions they should be evaluated with
cost_factor_names<-read.csv('../system_cost_factors_list.csv')
#defines how each transformation is evaluated, including difference variables, cost multipliers, etc.
transformation_cost_definitions<-read.csv('../transformation_cost_definitions.csv')
#defines how to post procdess strategies that should be scaled because they interact
postprocess_interactions<-read.csv('../strategy_interaction_definitions.csv')
results_system<-cb_calculate_system_costs(data,
strategy_cost_instructions[strategy_cost_instructions$strategy_code=='PFLO:ALL_PLUR',],
cost_factor_names)#[cost_factor_names$system_cost_filename=='wali_sanitation_cost_factors.csv',])
results_tx<-cb_calculate_transformation_costs(data,
strategy_cost_instructions[strategy_cost_instructions$strategy_code=='PFLO:ALL_PLUR',],
strategy2tx,
transformation_cost_definitions)
results_all<-rbind(results_system, results_tx)
#maps strategies to transformations, from James
strategy2tx<-read.csv('../attribute_strategy_code.csv', check.names = FALSE)
#tells us which strategies to evaluate costs and benefit sfor
strategy_cost_instructions<-read.csv('../strategy_cost_instructions.csv')
#the list of all the cost factor files in the system, and the functions they should be evaluated with
cost_factor_names<-read.csv('../system_cost_factors_list.csv')
#defines how each transformation is evaluated, including difference variables, cost multipliers, etc.
transformation_cost_definitions<-read.csv('../transformation_cost_definitions.csv')
#defines how to post procdess strategies that should be scaled because they interact
postprocess_interactions<-read.csv('../strategy_interaction_definitions.csv')
results_system<-cb_calculate_system_costs(data,
strategy_cost_instructions[strategy_cost_instructions$strategy_code=='PFLO:ALL_PLUR',],
cost_factor_names)#[cost_factor_names$system_cost_filename=='wali_sanitation_cost_factors.csv',])
diff_ar
diff_var
View(data)
data = subset(data, select=c(f, SSP_GLOBAL_SIMULATION_IDENTIFIERS))
data<-output.file
#Merge model output with strategy attributes (mainly the strategy_code)
run_attributes<-ssp_merge_run_attributes(primary_filename, strategy_filename)
merged_data<-merge(run_attributes[,c('primary_id', 'strategy_code')], data, by=c('primary_id'), x.all=TRUE)
data<-merged_data
#clean the data of furnace gas and crude
temp_data_cols<-colnames(data)
cols_to_keep<-temp_data_cols[!grepl('totalvalue.*furnace_gas', temp_data_cols)]
cols_to_keep<-cols_to_keep[!grepl(glob2rx('totalvalue_*_fuel_consumed_*_fuel_crude'), cols_to_keep)]
data = subset(data, select = cols_to_keep )
SSP_GLOBAL_list_of_strategies<-unique(data$strategy_code)
SSP_GLOBAL_list_of_variables<-setdiff(colnames(data), SSP_GLOBAL_SIMULATION_IDENTIFIERS)
data = subset(data, select=c(f, SSP_GLOBAL_SIMULATION_IDENTIFIERS))
strategy2tx<-read.csv('../attribute_strategy_code.csv', check.names = FALSE)
#tells us which strategies to evaluate costs and benefit sfor
strategy_cost_instructions<-read.csv('../strategy_cost_instructions.csv')
#the list of all the cost factor files in the system, and the functions they should be evaluated with
cost_factor_names<-read.csv('../system_cost_factors_list.csv')
#defines how each transformation is evaluated, including difference variables, cost multipliers, etc.
transformation_cost_definitions<-read.csv('../transformation_cost_definitions.csv')
#defines how to post procdess strategies that should be scaled because they interact
postprocess_interactions<-read.csv('../strategy_interaction_definitions.csv')
results_system<-cb_calculate_system_costs(data,
strategy_cost_instructions[strategy_cost_instructions$strategy_code=='PFLO:ALL_PLUR',],
cost_factor_names)#[cost_factor_names$system_cost_filename=='wali_sanitation_cost_factors.csv',])
results_tx<-cb_calculate_transformation_costs(data,
strategy_cost_instructions[strategy_cost_instructions$strategy_code=='PFLO:ALL_PLUR',],
strategy2tx,
transformation_cost_definitions)
results_all<-rbind(results_system, results_tx)
SSP_GLOBAL_list_of_cbvars<-unique(results_all$variable)
results_tx<-cb_calculate_transformation_costs(data,
strategy_cost_instructions[strategy_cost_instructions$strategy_code=='PFLO:ALL_PLUR',],
strategy2tx,
transformation_cost_definitions)
diff_ar
diff_var
results_tx<-cb_calculate_transformation_costs(data,
strategy_cost_instructions[strategy_cost_instructions$strategy_code=='PFLO:ALL_PLUR',],
strategy2tx,
transformation_cost_definitions)
#append the variables in the cost definitions
x<-read.csv('../transformation_cost_definitions.csv')
lapply(x, FUN=glob2rx)
lapply(x$difference_variable, FUN=glob2rx)
#append the variables in the cost definitions
x<-read.csv('../transformation_cost_definitions.csv')
a<-append(a, lapply(x$difference_variable, FUN=glob2rx))
#ppaned the variables explicitly searched for
a<-append(a, SSP_GLOBAL_LOG_OF_SEARCHED_VARS)
#get the matching terms
b<-unlist(a)
c<-paste0(b, collapse='|')
d<-grep(c, SSP_GLOBAL_list_of_variables)
e<-SSP_GLOBAL_list_of_variables[d]
#mke it unique
f<-unique(e)
write.csv(f, 'LOG_variables_searched.csv')
data<-output.file
#Merge model output with strategy attributes (mainly the strategy_code)
run_attributes<-ssp_merge_run_attributes(primary_filename, strategy_filename)
merged_data<-merge(run_attributes[,c('primary_id', 'strategy_code')], data, by=c('primary_id'), x.all=TRUE)
data<-merged_data
#clean the data of furnace gas and crude
temp_data_cols<-colnames(data)
cols_to_keep<-temp_data_cols[!grepl('totalvalue.*furnace_gas', temp_data_cols)]
cols_to_keep<-cols_to_keep[!grepl(glob2rx('totalvalue_*_fuel_consumed_*_fuel_crude'), cols_to_keep)]
data = subset(data, select = cols_to_keep )
SSP_GLOBAL_list_of_strategies<-unique(data$strategy_code)
SSP_GLOBAL_list_of_variables<-setdiff(colnames(data), SSP_GLOBAL_SIMULATION_IDENTIFIERS)
data = subset(data, select=c(f, SSP_GLOBAL_SIMULATION_IDENTIFIERS))
#maps strategies to transformations, from James
strategy2tx<-read.csv('../attribute_strategy_code.csv', check.names = FALSE)
#tells us which strategies to evaluate costs and benefit sfor
strategy_cost_instructions<-read.csv('../strategy_cost_instructions.csv')
#the list of all the cost factor files in the system, and the functions they should be evaluated with
cost_factor_names<-read.csv('../system_cost_factors_list.csv')
#defines how each transformation is evaluated, including difference variables, cost multipliers, etc.
transformation_cost_definitions<-read.csv('../transformation_cost_definitions.csv')
#defines how to post procdess strategies that should be scaled because they interact
postprocess_interactions<-read.csv('../strategy_interaction_definitions.csv')
results_system<-cb_calculate_system_costs(data,
strategy_cost_instructions[strategy_cost_instructions$strategy_code=='PFLO:ALL_PLUR',],
cost_factor_names)#[cost_factor_names$system_cost_filename=='wali_sanitation_cost_factors.csv',])
results_tx<-cb_calculate_transformation_costs(data,
strategy_cost_instructions[strategy_cost_instructions$strategy_code=='PFLO:ALL_PLUR',],
strategy2tx,
transformation_cost_definitions)
debugSource("~/Desktop/LAC_Decarb_Git/ssp_cost_benefits/Main/cb_strategy_specific_functions.R", echo=TRUE)
results_tx<-cb_calculate_transformation_costs(data,
strategy_cost_instructions[strategy_cost_instructions$strategy_code=='PFLO:ALL_PLUR',],
strategy2tx,
transformation_cost_definitions)
x<-read.csv('../transformation_cost_definitions.csv')
a<-append(a, lapply(x$difference_variable, FUN=glob2rx))
a<-append(a, lapply(x$arg1, FUN=glob2rx))
a<-append(a, lapply(x$arg2, FUN=glob2rx))
#ppaned the variables explicitly searched for
a<-append(a, SSP_GLOBAL_LOG_OF_SEARCHED_VARS)
#get the matching terms
b<-unlist(a)
c<-paste0(b, collapse='|')
d<-grep(c, SSP_GLOBAL_list_of_variables)
e<-SSP_GLOBAL_list_of_variables[d]
#mke it unique
f<-unique(e)
data<-output.file
#Merge model output with strategy attributes (mainly the strategy_code)
run_attributes<-ssp_merge_run_attributes(primary_filename, strategy_filename)
merged_data<-merge(run_attributes[,c('primary_id', 'strategy_code')], data, by=c('primary_id'), x.all=TRUE)
data<-merged_data
#clean the data of furnace gas and crude
temp_data_cols<-colnames(data)
cols_to_keep<-temp_data_cols[!grepl('totalvalue.*furnace_gas', temp_data_cols)]
cols_to_keep<-cols_to_keep[!grepl(glob2rx('totalvalue_*_fuel_consumed_*_fuel_crude'), cols_to_keep)]
data = subset(data, select = cols_to_keep )
SSP_GLOBAL_list_of_strategies<-unique(data$strategy_code)
SSP_GLOBAL_list_of_variables<-setdiff(colnames(data), SSP_GLOBAL_SIMULATION_IDENTIFIERS)
data = subset(data, select=c(f, SSP_GLOBAL_SIMULATION_IDENTIFIERS))
#maps strategies to transformations, from James
strategy2tx<-read.csv('../attribute_strategy_code.csv', check.names = FALSE)
#tells us which strategies to evaluate costs and benefit sfor
strategy_cost_instructions<-read.csv('../strategy_cost_instructions.csv')
#the list of all the cost factor files in the system, and the functions they should be evaluated with
cost_factor_names<-read.csv('../system_cost_factors_list.csv')
#defines how each transformation is evaluated, including difference variables, cost multipliers, etc.
transformation_cost_definitions<-read.csv('../transformation_cost_definitions.csv')
#defines how to post procdess strategies that should be scaled because they interact
postprocess_interactions<-read.csv('../strategy_interaction_definitions.csv')
results_tx<-cb_calculate_transformation_costs(data,
strategy_cost_instructions[strategy_cost_instructions$strategy_code=='PFLO:ALL_PLUR',],
strategy2tx,
transformation_cost_definitions)
list_of_variables
a<-append(a, c('frac_ippu_cement_clinker', 'prod_ippu_cement_tonne'))
#ppaned the variables explicitly searched for
a<-append(a, SSP_GLOBAL_LOG_OF_SEARCHED_VARS)
#get the matching terms
b<-unlist(a)
c<-paste0(b, collapse='|')
d<-grep(c, SSP_GLOBAL_list_of_variables)
e<-SSP_GLOBAL_list_of_variables[d]
#mke it unique
f<-unique(e)
data<-output.file
#Merge model output with strategy attributes (mainly the strategy_code)
run_attributes<-ssp_merge_run_attributes(primary_filename, strategy_filename)
merged_data<-merge(run_attributes[,c('primary_id', 'strategy_code')], data, by=c('primary_id'), x.all=TRUE)
data<-merged_data
#clean the data of furnace gas and crude
temp_data_cols<-colnames(data)
cols_to_keep<-temp_data_cols[!grepl('totalvalue.*furnace_gas', temp_data_cols)]
cols_to_keep<-cols_to_keep[!grepl(glob2rx('totalvalue_*_fuel_consumed_*_fuel_crude'), cols_to_keep)]
data = subset(data, select = cols_to_keep )
SSP_GLOBAL_list_of_strategies<-unique(data$strategy_code)
SSP_GLOBAL_list_of_variables<-setdiff(colnames(data), SSP_GLOBAL_SIMULATION_IDENTIFIERS)
data = subset(data, select=c(f, SSP_GLOBAL_SIMULATION_IDENTIFIERS))
#maps strategies to transformations, from James
strategy2tx<-read.csv('../attribute_strategy_code.csv', check.names = FALSE)
#tells us which strategies to evaluate costs and benefit sfor
strategy_cost_instructions<-read.csv('../strategy_cost_instructions.csv')
#the list of all the cost factor files in the system, and the functions they should be evaluated with
cost_factor_names<-read.csv('../system_cost_factors_list.csv')
#defines how each transformation is evaluated, including difference variables, cost multipliers, etc.
transformation_cost_definitions<-read.csv('../transformation_cost_definitions.csv')
#defines how to post procdess strategies that should be scaled because they interact
postprocess_interactions<-read.csv('../strategy_interaction_definitions.csv')
results_system<-cb_calculate_system_costs(data,
strategy_cost_instructions[strategy_cost_instructions$strategy_code=='PFLO:ALL_PLUR',],
cost_factor_names)#[cost_factor_names$system_cost_filename=='wali_sanitation_cost_factors.csv',])
results_tx<-cb_calculate_transformation_costs(data,
strategy_cost_instructions[strategy_cost_instructions$strategy_code=='PFLO:ALL_PLUR',],
strategy2tx,
transformation_cost_definitions)
#get the cost factor variables
list_of_cost_factors<-read.csv('../system_cost_factors_list.csv')
a<-ssp_report_cost_factors(list_of_cost_factors)
#append the variables in the cost definitions
x<-read.csv('../transformation_cost_definitions.csv')
a<-append(a, lapply(x$difference_variable, FUN=glob2rx))
a<-append(a, lapply(x$arg1, FUN=glob2rx))
a<-append(a, lapply(x$arg2, FUN=glob2rx))
a<-append(a, c('frac_ippu_cement_clinker', 'prod_ippu_cement_tonne'))
#ppaned the variables explicitly searched for
a<-append(a, SSP_GLOBAL_LOG_OF_SEARCHED_VARS)
#appendi helpful vvariables
cols_to_grep<-c(
'primary_id',
'\\bregion\\b',
'time_period',
#    'area_agrc',
'area_lndu',
'demand_agrc',
'demand_lvst',
'yield_agrc',
'pop_lvst',
'emission_co2e_subsector_total',
'totalvalue_enfu_fuel_consumed',
glob2rx('energy_consumption_*_total'),
'energy_demand_enfu_subsector_total_pj_',
'energy_demand_enfu_total_fuel_',
'qty_waso',
'gasrf_ippu_co2_capture'
)
a<-append(a, cols_to_grep)
#get the matching terms
b<-unlist(a)
c<-paste0(b, collapse='|')
d<-grep(c, SSP_GLOBAL_list_of_variables)
e<-SSP_GLOBAL_list_of_variables[d]
#mke it unique
f<-unique(e)
cols_to_grep<-c(
'primary_id',
'\\bregion\\b',
'time_period',
#    'area_agrc',
'area_lndu',
'demand_agrc',
'demand_lvst',
'yield_agrc',
'pop_lvst',
'emission_co2e_subsector_total',
'totalvalue_enfu_fuel_consumed',
glob2rx('energy_consumption_*_total'),
'energy_demand_enfu_subsector_total_pj_',
'energy_demand_enfu_total_fuel_',
#  'qty_waso',
#  'gasrf_ippu_co2_capture'
)
a<-append(a, cols_to_grep)
#appendi helpful vvariables
cols_to_grep<-c(
'primary_id',
'\\bregion\\b',
'time_period',
#    'area_agrc',
'area_lndu',
'demand_agrc',
'demand_lvst',
'yield_agrc',
'pop_lvst',
'emission_co2e_subsector_total',
'totalvalue_enfu_fuel_consumed',
glob2rx('energy_consumption_*_total'),
'energy_demand_enfu_subsector_total_pj_',
'energy_demand_enfu_total_fuel_'
#  'qty_waso',
#  'gasrf_ippu_co2_capture'
)
a<-append(a, cols_to_grep)
#get the matching terms
b<-unlist(a)
c<-paste0(b, collapse='|')
d<-grep(c, SSP_GLOBAL_list_of_variables)
e<-SSP_GLOBAL_list_of_variables[d]
#mke it unique
f<-unique(e)
write.csv(f, 'LOG_variables_searched.csv')
#----------------Get Variables Used in Cost Analysis-------------------
#get the cost factor variables
list_of_cost_factors<-read.csv('../system_cost_factors_list.csv')
a<-ssp_report_cost_factors(list_of_cost_factors)
#append the variables in the cost definitions
x<-read.csv('../transformation_cost_definitions.csv')
a<-append(a, lapply(x$difference_variable, FUN=glob2rx))
a<-append(a, lapply(x$arg1, FUN=glob2rx))
a<-append(a, lapply(x$arg2, FUN=glob2rx))
a<-append(a, c('frac_ippu_cement_clinker', 'prod_ippu_cement_tonne'))
#ppaned the variables explicitly searched for
a<-append(a, SSP_GLOBAL_LOG_OF_SEARCHED_VARS)
#appendi helpful vvariables
cols_to_grep<-c(
'primary_id',
'\\bregion\\b',
'time_period',
#    'area_agrc',
'area_lndu',
'demand_agrc',
'demand_lvst',
'yield_agrc',
'pop_lvst',
'emission_co2e_subsector_total',
'totalvalue_enfu_fuel_consumed',
glob2rx('energy_consumption_*_total'),
'energy_demand_enfu_subsector_total_pj_',
'energy_demand_enfu_total_fuel_'
#  'qty_waso',
#  'gasrf_ippu_co2_capture'
)
#a<-append(a, cols_to_grep)
#get the matching terms
b<-unlist(a)
c<-paste0(b, collapse='|')
d<-grep(c, SSP_GLOBAL_list_of_variables)
e<-SSP_GLOBAL_list_of_variables[d]
#mke it unique
f<-unique(e)
