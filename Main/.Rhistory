R.version
source("~/Desktop/LAC Energy Tableaus/cost_function_bilateral.R")
R.version
source("~/Desktop/LAC Energy Tableaus/cost_function_bilateral.R")
ssp_cost_converter(50, "LAC_AVERAGE", 2010, "LAC_AVERAGE", 2019)
source("~/Desktop/LAC Energy Tableaus/cost_function_bilateral.R")
ssp_cost_converter(50, "LAC_AVERAGE", 2010, "LAC_AVERAGE", 2019)
source("~/Desktop/LAC Energy Tableaus/cost_function_bilateral.R")
ssp_cost_converter(50, "LAC_AVERAGE", 2010, "LAC_AVERAGE", 2019)
source("~/Desktop/LAC_Decarb_Git/ssp_cost_converter/src/cost_function_bilateral.R")
getwd()
ER_bilateral <- read.csv(".../data/ER_bilateral.csv")
ER_bilateral <- read.csv("./data/ER_bilateral.csv")
source("~/Desktop/LAC_Decarb_Git/ssp_cost_converter/src/cost_function_bilateral.R")
getwd()
ER_bilateral <- read.csv("/Users/nidhi/Desktop/LAC_Decarb_Git/ssp_cost_converter/data/ER_bilateral.csv")
source("~/Desktop/LAC_Decarb_Git/ssp_cost_converter/src/cost_function_bilateral.R")
source("~/Desktop/LAC_Decarb_Git/ssp_cost_converter/src/cost_function_bilateral.R")
ssp_cost_converter(50, "LAC_AVERAGE", 2010, "LAC_AVERAGE", 2019)
ssp_cost_converter(40, "USA", 2018, "LAC_AVERAGE", 2019)
list.of.packages <- c("devtools")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(devtools)
install_github("milocortes/ssp_cost_converter")
library(SSPCostConverter)
packageVersion("SSPCostConverter")
# Install necessary packages
list.of.packages <- c("devtools")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(devtools)
install_github("milocortes/ssp_cost_converter")
library(SSPCostConverter)
packageVersion("SSPCostConverter")
local({r <- getOption("repos")
r["CRAN"] <- "https://cran.r-project.org
options(repos=r)
})
)
# Install necessary packages
list.of.packages <- c("devtools")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(devtools)
install_github("milocortes/ssp_cost_converter")
#-------------SET WORKING DIRECTORY AND PATHS----------
setwd('~/Desktop/LAC_Decarb_Git/sisepuede_costs_benefits/Main/')
#Paths to data files
#path_to_model_results<-'/Users/nidhi/Desktop/LAC Model Results and Visualizations/'
#data_filename<-paste0(path_to_model_results, 'sisepuede_results_WIDE_scaled.csv') #path to model output runs
#path_to_model_results<-'/Users/nidhi/Desktop/SSP Baseline Futures Test/'
#data_filename<-paste0(path_to_model_results, 'sisepuede_results_WIDE_scaled.csv') #path to model output runs
path_to_model_results<-'/Users/nidhi/Desktop/FUTURES TEST WITH WORKING DATA/'
data_filename<-paste0(path_to_model_results, 'sisepuede_results_WIDE_scaled.csv') #path to model output runs
#path_to_model_results<-'/Users/nidhi/Downloads/Futures Test for Edmundo/'
#data_filename<-paste0(path_to_model_results, '811.csv')
primary_filename<-paste0(path_to_model_results, 'ATTRIBUTE_PRIMARY.csv') #path to model output primary filename
strategy_filename<-paste0(path_to_model_results, 'ATTRIBUTE_STRATEGY.csv') #path to model output strategy filename
cb_output_filename<-paste0(path_to_model_results,'cost_benefit_results.csv') #path to write results
net_benefit_ghg_output_filename<-paste0(path_to_model_results,'net_benefit_net_ghg.csv') #path to write results
cb_futures_output_filename<-paste0(path_to_model_results,'cost_benefits_in_futures.csv') #path to write results
trimmed_data_filename<-paste0(path_to_model_results, 'sisepuede_results_TRIMMED_LONG.csv') #path to trimmed data for Tableau
#-------------SOURCE LIBRARIES AND CODE-----
source('cb_config.R')
source('cb_utilities.R')
source('cb_strategy_specific_functions.R')
source('general_ssp_utilities.R')
#-------------READ THE DATA-----------------
output.file<-read.csv(data_filename)
#-------------PREPARE THE DATA--------------
#Read data
data<-output.file
#Merge model output with strategy attributes (mainly the strategy_code)
run_attributes<-ssp_merge_run_attributes(primary_filename, strategy_filename)
merged_data<-merge(run_attributes[,c('primary_id', 'strategy_code', 'future_id')], data, by=c('primary_id'), x.all=TRUE)
data<-merged_data
#clean the data of furnace gas and crude
temp_data_cols<-colnames(data)
cols_to_keep<-temp_data_cols[!grepl('totalvalue.*furnace_gas', temp_data_cols)]
cols_to_keep<-cols_to_keep[!grepl(glob2rx('totalvalue_*_fuel_consumed_*_fuel_crude'), cols_to_keep)]
data = subset(data, select = cols_to_keep )
#add calculation of total TLUs to data
tlu_conversions<-read.csv('../strategy_specific_cb_files/lvst_tlu_conversions.csv')
pop_livestock<-data[, c(SSP_GLOBAL_SIMULATION_IDENTIFIERS, 'future_id', colnames(data)[grep('pop_lvst', colnames(data))])]
pop_livestock<-melt(pop_livestock, id.vars=c('primary_id', 'time_period', 'region', 'strategy_code', 'future_id'))
pop_livestock<-merge(pop_livestock, tlu_conversions, by='variable')
pop_livestock$total_tlu<-pop_livestock$value * pop_livestock$TLU
pop_livestock_summarized<-pop_livestock %>%
group_by(primary_id, time_period, region, strategy_code, future_id) %>% #c('primary_id', 'time_period', 'region', 'strategy_code')) %>%
summarise(lvst_total_tlu= sum(total_tlu))
data<-merge(data, pop_livestock_summarized, by=c('primary_id', 'time_period', 'region', 'strategy_code', 'future_id'))
#replace any lagging references to "PFLO:SOCIOTECHNICAL" with "PFLO:CHANGE_CONSUMPTION"
data$strategy_code[data$strategy_code=='PFLO:SOCIOTECHNICAL']<-'PFLO:CHANGE_CONSUMPTION'
SSP_GLOBAL_list_of_strategies<-unique(data$strategy_code)
SSP_GLOBAL_list_of_variables<-setdiff(colnames(data), SSP_GLOBAL_SIMULATION_IDENTIFIERS)
#-------------PRODUCE A COPY OF TRIMMED INPUT DATA FOR TABLEAU-------------------
#create a column of outputs
cols_to_grep<-c(
'primary_id',
'\\bregion\\b',
'time_period',
'future_id',
#    'area_agrc',
'area_lndu',
'demand_agrc',
'demand_lvst',
'yield_agrc',
'pop_lvst',
#  'exportsadj_lvst',
#  'exportsadj_agrc',
#  'emission_co2e_subsector_total',
'emission_co2e',
#  'lndu_conversion',
'totalvalue_enfu_fuel_consumed',
glob2rx('energy_consumption_*_total'),
'energy_demand_enfu_subsector_total_pj_',
'energy_demand_enfu_total_fuel_',
'nemomod_entc_annual_production_by_technology',
'qty_waso'
, 'trns'
)
trimmed_data_long<-ssp_trim_reshape(data, cols_to_grep)
write.csv(trimmed_data_long, trimmed_data_filename)
#-------------SET WORKING DIRECTORY AND PATHS----------
setwd('~/Desktop/LAC_Decarb_Git/sisepuede_costs_benefits/Main/')
#Paths to data files
path_to_model_results<-'/Users/nidhi/Desktop/LAC Model Results and Visualizations/'
data_filename<-paste0(path_to_model_results, 'sisepuede_results_WIDE_scaled.csv') #path to model output runs
#path_to_model_results<-'/Users/nidhi/Desktop/FUTURES TEST WITH WORKING DATA/'
#data_filename<-paste0(path_to_model_results, 'sisepuede_results_WIDE_scaled.csv') #path to model output runs
primary_filename<-paste0(path_to_model_results, 'ATTRIBUTE_PRIMARY.csv') #path to model output primary filename
strategy_filename<-paste0(path_to_model_results, 'ATTRIBUTE_STRATEGY.csv') #path to model output strategy filename
cb_output_filename<-paste0(path_to_model_results,'cost_benefit_results.csv') #path to write results
net_benefit_ghg_output_filename<-paste0(path_to_model_results,'net_benefit_net_ghg.csv') #path to write results
cb_futures_output_filename<-paste0(path_to_model_results,'cost_benefits_in_futures.csv') #path to write results
trimmed_data_filename<-paste0(path_to_model_results, 'sisepuede_results_TRIMMED_LONG.csv') #path to trimmed data for Tableau
#-------------SOURCE LIBRARIES AND CODE-----
source('cb_config.R')
source('cb_utilities.R')
source('cb_strategy_specific_functions.R')
source('general_ssp_utilities.R')
#-------------READ THE DATA-----------------
output.file<-read.csv(data_filename)
#-------------PREPARE THE DATA--------------
#Read data
data<-output.file
#Merge model output with strategy attributes (mainly the strategy_code)
run_attributes<-ssp_merge_run_attributes(primary_filename, strategy_filename)
merged_data<-merge(run_attributes[,c('primary_id', 'strategy_code', 'future_id')], data, by=c('primary_id'), x.all=TRUE)
data<-merged_data
#clean the data of furnace gas and crude
temp_data_cols<-colnames(data)
cols_to_keep<-temp_data_cols[!grepl('totalvalue.*furnace_gas', temp_data_cols)]
cols_to_keep<-cols_to_keep[!grepl(glob2rx('totalvalue_*_fuel_consumed_*_fuel_crude'), cols_to_keep)]
data = subset(data, select = cols_to_keep )
#add calculation of total TLUs to data
tlu_conversions<-read.csv('../strategy_specific_cb_files/lvst_tlu_conversions.csv')
pop_livestock<-data[, c(SSP_GLOBAL_SIMULATION_IDENTIFIERS, 'future_id', colnames(data)[grep('pop_lvst', colnames(data))])]
pop_livestock<-melt(pop_livestock, id.vars=c('primary_id', 'time_period', 'region', 'strategy_code', 'future_id'))
pop_livestock<-merge(pop_livestock, tlu_conversions, by='variable')
pop_livestock$total_tlu<-pop_livestock$value * pop_livestock$TLU
pop_livestock_summarized<-pop_livestock %>%
group_by(primary_id, time_period, region, strategy_code, future_id) %>% #c('primary_id', 'time_period', 'region', 'strategy_code')) %>%
summarise(lvst_total_tlu= sum(total_tlu))
data<-merge(data, pop_livestock_summarized, by=c('primary_id', 'time_period', 'region', 'strategy_code', 'future_id'))
#replace any lagging references to "PFLO:SOCIOTECHNICAL" with "PFLO:CHANGE_CONSUMPTION"
data$strategy_code[data$strategy_code=='PFLO:SOCIOTECHNICAL']<-'PFLO:CHANGE_CONSUMPTION'
SSP_GLOBAL_list_of_strategies<-unique(data$strategy_code)
SSP_GLOBAL_list_of_variables<-setdiff(colnames(data), SSP_GLOBAL_SIMULATION_IDENTIFIERS)
#-------------PRODUCE A COPY OF TRIMMED INPUT DATA FOR TABLEAU-------------------
#create a column of outputs
cols_to_grep<-c(
'primary_id',
'\\bregion\\b',
'time_period',
'future_id',
#    'area_agrc',
'area_lndu',
'demand_agrc',
'demand_lvst',
'yield_agrc',
'pop_lvst',
#  'exportsadj_lvst',
#  'exportsadj_agrc',
#  'emission_co2e_subsector_total',
'emission_co2e',
#  'lndu_conversion',
'totalvalue_enfu_fuel_consumed',
glob2rx('energy_consumption_*_total'),
'energy_demand_enfu_subsector_total_pj_',
'energy_demand_enfu_total_fuel_',
'nemomod_entc_annual_production_by_technology',
'qty_waso'
, 'trns'
)
trimmed_data_long<-ssp_trim_reshape(data, cols_to_grep)
write.csv(trimmed_data_long, trimmed_data_filename)
